interface MathCal{
int cal(int a,int b);
}
public class MathOperations {
public static void main(String[] args)
{
//(parameters)->{statements};
MathCal add=(a,b)->a+b;
MathCal mul=(a,b)->a*b;
System.out.println(add.cal(10, 05));
System.out.println(mul.cal(3,6));
}
}
â€”-------------------------------------------------------------------------------
//predefined functional interfaces
public class PredicateDemo {
public static void main(String[] args)
{
//test is the abstract method of
predicate
Predicate<String>
p=str->str.length()>5;
System.out.println(p.test("lavanya"));//tru
e
System.out.println(p.test("TNSIF"));//false
}
}
//Demo for Supplier interface
public class SupplierDemo {
public static void main(String[] args)
{
 Supplier<Double>
sup=()->Math.random();
 System.out.println(sup.get());
}
}
